1:1-1:1::Examples.Liquid.$trModule :: "GHC.Types.Module"
39:1-39:13::Examples.Liquid.weAreEven_LH :: "[{v : GHC.Types.Int | v mod 2 == 0}]"
39:18-39:22::lq_anf$##7205759403792811978 :: "GHC.Types.Int"
39:19-39:20::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
39:26-39:29::lq_anf$##7205759403792811981 :: "GHC.Types.Int"
39:27-39:28::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
41:1-41:10::Examples.Liquid.weAreEven :: "[(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)]"
41:13-41:23::lq_anf$##7205759403792811990 :: "GHC.Types.Int -> (Propositional.? GHC.Types.Int Examples.Liquid.IsEven)"
44:1-44:11::Examples.Liquid.notEven_LH :: "{v : GHC.Types.Int | v mod 2 == 0}"
46:1-46:8::Examples.Liquid.notEven :: "(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)"
46:11-46:17::_ :: "GHC.Types.Int -> (Propositional.? GHC.Types.Int Examples.Liquid.IsEven)"
50:1-50:10::Examples.Liquid.isEven_LH :: "x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Bool | v <=> x1 mod 2 == 0}"
52:15-52:18::_ :: "{v : x1:GHC.Types.Bool -> {v : GHC.Types.Bool | v <=> not x1} | v == GHC.Classes.not}"
52:20-52:29::Examples.Liquid.isEven_LH :: "x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Bool | v <=> x1 mod 2 == 0}"
52:31-52:34::lq_anf$##7205759403792811966 :: "GHC.Types.Int"
52:32-52:33::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
55:1-55:9::Examples.Liquid.evens_LH :: "{v : GHC.Types.Int | v >= 0} -> [{v : GHC.Types.Int | v mod 2 == 0}]"
55:10-55:11::n :: "{v : GHC.Types.Int | v >= 0}"
55:14-55:50::lq_anf$##7205759403792811971 :: "{VV : [{VV : GHC.Types.Int | VV /= n\n                             && VV <= n\n                             && VV >= 0\n                             && VV < n\n                             && VV mod 2 == 0}] | len VV >= 0}"
55:24-55:32::_ :: "{v : x1:GHC.Types.Int -> x2:GHC.Types.Int -> [{v : GHC.Types.Int | x1 <= v\n                                                                   && v < x2}] | v == Examples.Liquid.range_LH}"
55:38-55:47::_ :: "{v : x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Bool | v <=> x1 mod 2 == 0} | v == Examples.Liquid.isEven_LH}"
56:1-56:6::Examples.Liquid.evens :: "GHC.Types.Int -> [(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)]"
56:7-56:8::n :: "GHC.Types.Int"
56:11-56:21::lq_anf$##7205759403792811974 :: "GHC.Types.Int -> (Propositional.? GHC.Types.Int Examples.Liquid.IsEven)"
56:23-56:31::_ :: "{v : {v : GHC.Types.Int | v >= 0} -> [{v : GHC.Types.Int | v mod 2 == 0}] | v == Examples.Liquid.evens_LH}"
61:1-61:9::Examples.Liquid.range_LH :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> [{v : GHC.Types.Int | x1 <= v\n                                                              && v < x2}]"
61:10-61:12::lo :: "GHC.Types.Int"
61:13-61:15::hi :: "GHC.Types.Int"
62:5-62:12::lq_anf$##7205759403792811958 :: "{v : GHC.Types.Bool | v <=> lo < hi}"
62:8-62:9::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 < x2}"
62:22-62:30::Examples.Liquid.range_LH :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> [{v : GHC.Types.Int | x1 <= v\n                                                              && v < x2}]"
62:32-62:36::lq_anf$##7205759403792811961 :: "GHC.Types.Int"
62:34-62:35::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
66:1-66:9::Examples.Liquid.shift_LH :: "[{v : GHC.Types.Int | v mod 2 == 0}] -> {v : GHC.Types.Int | v mod 2 == 0} -> [{v : GHC.Types.Int | v mod 2 == 0}]"
66:10-66:12::xs :: "[{v : GHC.Types.Int | v mod 2 == 0}]"
66:13-66:14::k :: "{v : GHC.Types.Int | v mod 2 == 0}"
66:17-66:34::lq_anf$##7205759403792811950 :: "{VV : [{VV : GHC.Types.Int | VV mod 2 == 0}] | len VV <= len xs\n                                               && len VV >= 0}"
66:18-66:23::lq_anf$##7205759403792811949 :: "GHC.Types.Int"
66:20-66:21::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
68:1-68:6::Examples.Liquid.shift :: "[(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)] -> (Propositional.? GHC.Types.Int Examples.Liquid.IsEven) -> [(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)]"
68:7-68:9::xs :: "[(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)]"
68:10-68:11::k :: "(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)"
68:14-68:24::lq_anf$##7205759403792811951 :: "GHC.Types.Int -> (Propositional.? GHC.Types.Int Examples.Liquid.IsEven)"
68:26-68:34::_ :: "{v : [{v : GHC.Types.Int | v mod 2 == 0}] -> {v : GHC.Types.Int | v mod 2 == 0} -> [{v : GHC.Types.Int | v mod 2 == 0}] | v == Examples.Liquid.shift_LH}"
68:36-68:43::lq_anf$##7205759403792811953 :: "(Propositional.? GHC.Types.Int Examples.Liquid.IsEven) -> GHC.Types.Int"
68:49-68:52::lq_anf$##7205759403792811955 :: "(The.The (Propositional.? GHC.Types.Int Examples.Liquid.IsEven) GHC.Types.Int)"
71:1-71:10::Examples.Liquid.double_LH :: "[{v : GHC.Types.Int | v >= 0}] -> [{v : GHC.Types.Int | v mod 2 == 0}]"
71:11-71:13::xs :: "[{v : GHC.Types.Int | v >= 0}]"
71:16-71:33::lq_anf$##7205759403792811945 :: "{VV : [{VV : GHC.Types.Int | VV >= 0\n                             && VV mod 2 == 0}] | len VV <= len xs\n                                                  && len VV >= 0}"
71:17-71:22::lq_anf$##7205759403792811944 :: "GHC.Types.Int"
71:19-71:20::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
73:1-73:7::Examples.Liquid.double :: "[GHC.Types.Int] -> [(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)]"
73:10-73:20::lq_anf$##7205759403792811947 :: "x1:[GHC.Types.Int] -> {v : [(Propositional.? GHC.Types.Int Examples.Liquid.IsEven)] | len v == len x1}"