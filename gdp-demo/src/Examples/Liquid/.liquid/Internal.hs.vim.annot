1:1-1:1::Examples.Liquid.Internal.$trModule :: "GHC.Types.Module"
9:1-9:10::Examples.Liquid.Internal.weAreEven :: "[{v : GHC.Types.Int | v mod 2 == 0}]"
9:15-9:19::lq_anf$##7205759403792801753 :: "GHC.Types.Int"
9:16-9:17::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
9:23-9:26::lq_anf$##7205759403792801756 :: "GHC.Types.Int"
9:24-9:25::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
12:1-12:9::Examples.Liquid.Internal.someEven :: "{v : GHC.Types.Int | v mod 2 == 0}"
12:12-12:19::lq_anf$##7205759403792801749 :: "GHC.Types.Int"
12:15-12:16::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
12:20-12:21::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
16:1-16:7::Examples.Liquid.Internal.isEven :: "x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Bool | v <=> x1 mod 2 == 0}"
18:12-18:15::_ :: "{v : x1:GHC.Types.Bool -> {v : GHC.Types.Bool | v <=> not x1} | v == GHC.Classes.not}"
18:17-18:23::Examples.Liquid.Internal.isEven :: "x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Bool | v <=> x1 mod 2 == 0}"
18:25-18:28::lq_anf$##7205759403792801739 :: "GHC.Types.Int"
18:26-18:27::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
21:1-21:6::Examples.Liquid.Internal.evens :: "{v : GHC.Types.Int | v >= 0} -> [{v : GHC.Types.Int | v mod 2 == 0}]"
21:7-21:8::n :: "{v : GHC.Types.Int | v >= 0}"
21:11-21:41::lq_anf$##7205759403792801744 :: "{VV : [{VV : GHC.Types.Int | VV /= n\n                             && VV <= n\n                             && VV < n\n                             && VV >= 0\n                             && VV mod 2 == 0}] | len VV >= 0}"
21:21-21:26::_ :: "{v : x1:GHC.Types.Int -> x2:GHC.Types.Int -> [{v : GHC.Types.Int | x1 <= v\n                                                                   && v < x2}] | v == Examples.Liquid.Internal.range}"
21:32-21:38::_ :: "{v : x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Bool | v <=> x1 mod 2 == 0} | v == Examples.Liquid.Internal.isEven}"
25:1-25:6::Examples.Liquid.Internal.range :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> [{v : GHC.Types.Int | x1 <= v\n                                                              && v < x2}]"
25:7-25:9::lo :: "GHC.Types.Int"
25:10-25:12::hi :: "GHC.Types.Int"
26:5-26:12::lq_anf$##7205759403792801731 :: "{v : GHC.Types.Bool | v <=> lo < hi}"
26:8-26:9::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 < x2}"
26:22-26:27::Examples.Liquid.Internal.range :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> [{v : GHC.Types.Int | x1 <= v\n                                                              && v < x2}]"
26:29-26:33::lq_anf$##7205759403792801734 :: "GHC.Types.Int"
26:31-26:32::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
30:1-30:6::Examples.Liquid.Internal.shift :: "[{v : GHC.Types.Int | v mod 2 == 0}] -> {v : GHC.Types.Int | v mod 2 == 0} -> [{v : GHC.Types.Int | v mod 2 == 0}]"
30:7-30:9::xs :: "[{v : GHC.Types.Int | v mod 2 == 0}]"
30:10-30:11::k :: "{v : GHC.Types.Int | v mod 2 == 0}"
30:14-30:31::lq_anf$##7205759403792801730 :: "{VV : [{VV : GHC.Types.Int | VV mod 2 == 0}] | len VV <= len xs\n                                               && len VV >= 0}"
30:15-30:20::lq_anf$##7205759403792801729 :: "GHC.Types.Int"
30:17-30:18::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
33:1-33:7::Examples.Liquid.Internal.double :: "[{v : GHC.Types.Int | v >= 0}] -> [{v : GHC.Types.Int | v mod 2 == 0}]"
33:8-33:10::xs :: "[{v : GHC.Types.Int | v >= 0}]"
33:13-33:30::lq_anf$##7205759403792801727 :: "{VV : [{VV : GHC.Types.Int | VV >= 0\n                             && VV mod 2 == 0}] | len VV <= len xs\n                                                  && len VV >= 0}"
33:14-33:19::lq_anf$##7205759403792801726 :: "GHC.Types.Int"
33:16-33:17::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"